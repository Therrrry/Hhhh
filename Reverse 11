import re
import subprocess
import os

def parse_c_code(c_code):
    """
    Parse a C code to extract functions, calls, and comments.
    """
    functions = {}
    comments = []

    # Extract comments
    comment_pattern = re.compile(r"//.*|/\*.*?\*/", re.DOTALL)
    for comment in re.findall(comment_pattern, c_code):
        comments.append(comment.strip())

    # Extract function definitions
    function_pattern = re.compile(r"\b(\w+)\s+(\w+)\s*\(([^)]*)\)\s*\{")
    matches = list(re.finditer(function_pattern, c_code))

    for match in matches:
        return_type, function_name, arguments = match.groups()
        arguments = [arg.strip() for arg in arguments.split(",") if arg.strip()]
        function_body_start = match.end()

        # Find function body
        function_body = extract_function_body(c_code, function_body_start)

        # Extract function calls in the body
        calls = extract_function_calls(function_body)

        functions[function_name] = {
            "return_type": return_type,
            "arguments": arguments,
            "body": function_body,
            "calls": calls,
        }

    return comments, functions

def extract_function_body(c_code, start_index):
    """
    Extract the body of a function using nested brace parsing.
    """
    stack = []
    body = []
    in_body = False

    for i in range(start_index, len(c_code)):
        char = c_code[i]
        if char == '{':
            stack.append('{')
            in_body = True  # Start of the function body
        elif char == '}':
            if stack:
                stack.pop()
            else:
                # Unmatched closing brace, ignore or handle error
                raise ValueError("Unmatched closing brace in code.")
            if not stack:
                in_body = False  # End of the function body
                body.append(char)
                break
        if in_body:
            body.append(char)

    if stack:
        # Handle unmatched opening braces
        raise ValueError("Unmatched opening brace in code.")

    return ''.join(body)

def extract_function_calls(function_body):
    """
    Extract function calls from a function body.
    """
    call_pattern = re.compile(r"\b(\w+)\s*\(([^)]*)\)")
    calls = []
    for match in re.finditer(call_pattern, function_body):
        function_name, arguments = match.groups()
        calls.append({
            "function": function_name,
            "arguments": [arg.strip() for arg in arguments.split(",") if arg.strip()],
        })
    return calls

def generate_sequence_diagram(c_code, output_image="D:\\sequence_diagram.png"):
    """
    Generate a sequence diagram in PlantUML format and render it as an image.
    """
    comments, functions = parse_c_code(c_code)

    # Start the sequence diagram in PlantUML format
    uml_lines = ["@startuml", "actor User"]

    # Add function definitions and calls
    for function_name, details in functions.items():
        uml_lines.append(f"User -> {function_name}: Call")
        uml_lines.append(f"activate {function_name}")

        for call in details['calls']:
            uml_lines.append(f"{function_name} -> {call['function']}: {', '.join(call['arguments'])}")
            uml_lines.append(f"activate {call['function']}")
            uml_lines.append(f"{call['function']} --> {function_name}: return")
            uml_lines.append(f"deactivate {call['function']}")

        uml_lines.append(f"{function_name} --> User: return")
        uml_lines.append(f"deactivate {function_name}")

    # Add comments as notes
    for comment in comments:
        uml_lines.append(f"note left: {comment}")

    # End the sequence diagram
    uml_lines.append("@enduml")

    # Write the UML diagram to a file
    uml_text = "\n".join(uml_lines)
    uml_file = "D:\\sequence_diagram.puml"
    with open(uml_file, "w") as file:
        file.write(uml_text)

    # Render the diagram as an image using PlantUML
    render_plantuml(uml_file, output_image)

    print(f"Sequence diagram saved as {output_image}")

def render_plantuml(uml_file, output_image):
    """
    Render a PlantUML file into an image.
    """
    try:
        subprocess.run(["java", "-jar", "plantuml.jar", uml_file], check=True)
        # Move the generated PNG to the desired output image
        os.rename(uml_file.replace(".puml", ".png"), output_image)
    except FileNotFoundError:
        raise FileNotFoundError("PlantUML or Java is not installed or not accessible.")

if __name__ == "__main__":
    # Example C code snippet
    c_code = """
    /* Example C program */
    void exampleFunction(int a, int b) {
        // Initialize variables
        int sum = a + b;

        // Call helper function
        helperFunction(sum);
    }

    void helperFunction(int value) {
        // Print value
        printf("Value: %d\n", value);
    }

    void anotherFunction() {
        exampleFunction(5, 10);
        helperFunction(15);
    }
    """

    # Generate and render the sequence diagram
    generate_sequence_diagram(c_code, "D:\\example_sequence_diagram.png")
                          

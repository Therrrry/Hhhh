#!/usr/bin/env python

"""
This script constructs a proper CAN frame for extended ID and sends the message using a Vector CANalyzer interface.
It sends the message exactly 60 times (once per second) with TX ID 0x18DA03FA and listens for responses on RX ID 0x18DAFA03.
"""

import can
import time

def construct_frame(arbitration_id, data, extended_id=True):
    """Constructs a CAN message with the proper frame format."""
    if len(data) > 8:
        raise ValueError("CAN data payload cannot exceed 8 bytes.")

    msg = can.Message(
        arbitration_id=arbitration_id,
        data=data,
        is_extended_id=extended_id
    )
    return msg

def send_and_receive():
    """Sends a properly formatted CAN message 60 times, once per second, and listens for responses."""

    # Configure the CAN bus interface for Vector CANalyzer
    bus = can.Bus(interface="vector", app_name="CANalyzer", channel=0, bitrate=500000)

    # TX and RX arbitration IDs
    tx_id = 0x18DA03FA  # Transmit ID
    rx_id = 0x18DAFA03  # Receive ID

    # Data to send
    data = [0x02, 0x10, 0x01]

    # Construct the CAN frame
    msg = construct_frame(tx_id, data, extended_id=True)

    try:
        for i in range(60):  # Loop exactly 60 times
            # Send the CAN message
            try:
                bus.send(msg)
                print(f"Message {i + 1}/60 sent: TX ID=0x{tx_id:08X}, Data={msg.data}")
            except can.CanError:
                print(f"Message {i + 1}/60 NOT sent")
                continue

            # Wait for a response with RX ID
            try:
                response = bus.recv(timeout=1)  # Wait up to 1 second for a response
                if response and response.arbitration_id == rx_id:
                    print(f"Received response: RX ID=0x{response.arbitration_id:08X}, Data={list(response.data)}")
                elif response:
                    print(f"Received message with unexpected ID: 0x{response.arbitration_id:08X}")
                else:
                    print("No response received within 1 second.")
            except Exception as e:
                print(f"Error while receiving: {e}")

            time.sleep(1)  # Wait for 1 second before the next message

        print("Message transmission completed: Sent 60 messages.")
    except KeyboardInterrupt:
        print("Stopped by user")
    finally:
        bus.shutdown()

if __name__ == "__main__":
    send_and_receive()

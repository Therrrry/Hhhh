import pandas as pd
import os
from openpyxl import load_workbook
from openpyxl.styles import Font

# --- USER CONFIG ---
file_path = r"D:\hkiu\hjk"
sheet_name = "Sheet0"
output_file = r"D:\hkiu\final_output.xlsx"

def extract_numbers(cell_value):
    if pd.isnull(cell_value):
        return []
    return [val.strip() for val in str(cell_value).split(',') if val.strip()]

# --- Validate input ---
if not os.path.exists(file_path):
    raise FileNotFoundError(f"Input file not found at {file_path}")

df = pd.read_excel(file_path, sheet_name=sheet_name, header=None)

# --- Detect format ---
if df.shape[1] >= 7:
    print("Detected large Excel format (≥7 columns).")
    search_column_idx = 6
    map_column_idx = 3
elif df.shape[1] == 2:
    print("Detected 2-column Excel format.")
    search_column_idx = 1
    map_column_idx = 0
else:
    raise ValueError(f"Input Excel has {df.shape[1]} columns. Expected either ≥7 or exactly 2 columns.")

mapping_dict = {}

for idx, row in df.iterrows():
    if len(row) <= max(search_column_idx, map_column_idx):
        print(f"Skipping row {idx+1} due to insufficient columns.")
        continue

    numbers_in_row = extract_numbers(row[search_column_idx])
    map_value = str(row[map_column_idx]).strip()
    
    for number in numbers_in_row:
        mapping_dict.setdefault(number, []).append(map_value)

# --- Clean duplicates and sort values ---
for number in mapping_dict:
    mapping_dict[number] = sorted(set(mapping_dict[number]))

# --- Prepare output ---
output_data = [{"Number": number, "Mapped_Values": ', '.join(values)} for number, values in mapping_dict.items()]

output_df = pd.DataFrame(output_data)

# --- Sort by number if numeric ---
try:
    output_df["Number"] = output_df["Number"].astype(float)
    output_df = output_df.sort_values("Number")
except:
    output_df = output_df.sort_values("Number")

# --- Save Excel without formatting first ---
output_df.to_excel(output_file, index=False)

# --- Add color formatting using openpyxl ---
wb = load_workbook(output_file)
ws = wb.active

blue_font = Font(color="0000FF")   # Blue font for column 1
red_font = Font(color="FF0000")    # Red font for column 2

# Apply font color to header
ws["A1"].font = blue_font
ws["B1"].font = red_font

# Apply font color to all data rows
for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=2):
    row[0].font = blue_font  # Column 1
    row[1].font = red_font   # Column 2

# Save the colored Excel file
wb.save(output_file)

print(f"\n=== Process completed with colored columns ===")
print(f"Output saved at: {output_file}")

import os
import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QPushButton, QFileDialog,
    QListWidget, QLineEdit, QWidget, QMessageBox, QLabel, QHBoxLayout, QScrollArea
)
from PyQt5.QtCore import Qt
import subprocess

class ProgramRunnerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Program Runner")
        self.setGeometry(100, 100, 800, 600)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout(self.central_widget)

        # Folder selection
        folder_layout = QHBoxLayout()
        self.folder_label = QLabel("Folder: Not Selected")
        self.select_folder_button = QPushButton("Select Folder")
        self.select_folder_button.clicked.connect(self.select_folder)
        folder_layout.addWidget(self.folder_label)
        folder_layout.addWidget(self.select_folder_button)

        self.layout.addLayout(folder_layout)

        # Search bar
        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("Search programs...")
        self.search_bar.textChanged.connect(self.filter_programs)
        self.layout.addWidget(self.search_bar)

        # Program list
        self.program_list = QListWidget()
        self.layout.addWidget(self.program_list)

        # Scrollable Area for Output
        self.output_area = QScrollArea()
        self.output_label = QLabel()
        self.output_label.setWordWrap(True)
        self.output_area.setWidgetResizable(True)
        self.output_area.setWidget(self.output_label)
        self.layout.addWidget(self.output_area)

        # Run Button
        self.run_button = QPushButton("Run Selected Program")
        self.run_button.clicked.connect(self.run_selected_program)
        self.layout.addWidget(self.run_button)

        # Data
        self.folder_path = "D:\\Ptu"  # Default folder path
        self.folder_label.setText(f"Folder: {self.folder_path}")
        self.load_programs()  # Automatically load programs from the default folder

    def select_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Folder")
        if folder:
            self.folder_path = folder
            self.folder_label.setText(f"Folder: {folder}")
            self.load_programs()

    def load_programs(self):
        if not self.folder_path:
            return

        self.programs = [
            f for f in os.listdir(self.folder_path) if f.endswith(".py")
        ]
        self.program_list.clear()
        self.program_list.addItems(self.programs)

    def filter_programs(self):
        search_text = self.search_bar.text().lower()
        filtered_programs = [
            program for program in self.programs if search_text in program.lower()
        ]
        self.program_list.clear()
        self.program_list.addItems(filtered_programs)

    def run_selected_program(self):
        selected_item = self.program_list.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "No Selection", "Please select a program to run.")
            return

        program_name = selected_item.text()
        program_path = os.path.join(self.folder_path, program_name)

        try:
            process = subprocess.Popen(
                [sys.executable, program_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            stdout, stderr = process.communicate()

            if process.returncode == 0:
                self.output_label.setText(f"Output:\n{stdout}")
            else:
                self.output_label.setText(f"Error:\n{stderr}")

        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to run program: {str(e)}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ProgramRunnerApp()
    window.show()
    sys.exit(app.exec_())

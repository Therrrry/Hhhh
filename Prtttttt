import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import io

# Import pycparser modules
from pycparser import c_parser, c_ast, plyparser

class ASTConverterGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("C Code to AST Converter")
        self.root.geometry("1200x700")
        self.create_widgets()

    def create_widgets(self):
        # Create a frame for the buttons
        button_frame = tk.Frame(self.root)
        button_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)

        # Button to open a C source file
        open_button = tk.Button(button_frame, text="Open C File", command=self.open_file)
        open_button.pack(side=tk.LEFT, padx=5)

        # Button to clear the input/output text areas
        clear_button = tk.Button(button_frame, text="Clear", command=self.clear_text)
        clear_button.pack(side=tk.LEFT, padx=5)

        # Button to convert C code to AST
        convert_button = tk.Button(button_frame, text="Convert to AST", command=self.convert_to_ast)
        convert_button.pack(side=tk.LEFT, padx=5)

        # Create two side-by-side ScrolledText widgets:
        # One for the C code input and one for the AST output.
        text_frame = tk.Frame(self.root)
        text_frame.pack(fill=tk.BOTH, expand=True)

        # ScrolledText for C code input
        input_label = tk.Label(text_frame, text="C Code Input")
        input_label.pack(anchor=tk.NW, padx=5, pady=(5, 0))
        self.code_text = scrolledtext.ScrolledText(text_frame, wrap=tk.NONE, width=60)
        self.code_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        # ScrolledText for AST output
        output_label = tk.Label(text_frame, text="AST Output")
        output_label.pack(anchor=tk.NE, padx=5, pady=(5, 0))
        self.ast_text = scrolledtext.ScrolledText(text_frame, wrap=tk.NONE, width=60)
        self.ast_text.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)

    def open_file(self):
        """Open a C file and load its content into the input text area."""
        file_path = filedialog.askopenfilename(
            filetypes=[("C Source Files", "*.c"), ("All Files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, "r") as file:
                    code = file.read()
                self.code_text.delete(1.0, tk.END)
                self.code_text.insert(tk.END, code)
            except Exception as e:
                messagebox.showerror("File Error", f"Could not read file:\n{e}")

    def clear_text(self):
        """Clear both the input and output text areas."""
        self.code_text.delete(1.0, tk.END)
        self.ast_text.delete(1.0, tk.END)

    def convert_to_ast(self):
        """Convert the C code from the input text area into an AST and display it."""
        code = self.code_text.get(1.0, tk.END).strip()
        if not code:
            messagebox.showwarning("No Code", "Please enter or load C code first.")
            return

        parser = c_parser.CParser()

        try:
            # Parse the code to generate the AST
            ast = parser.parse(code)
            
            # Capture the AST string using an IO stream.
            ast_io = io.StringIO()
            ast.show(buf=ast_io)
            ast_str = ast_io.getvalue()

            # Display the AST in the output text area.
            self.ast_text.delete(1.0, tk.END)
            self.ast_text.insert(tk.END, ast_str)

        except plyparser.ParseError as parse_err:
            messagebox.showerror("Parse Error", f"Failed to parse C code:\n{parse_err}")
        except Exception as e:
            messagebox.showerror("Error", f"An unexpected error occurred:\n{e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ASTConverterGUI(root)
    root.mainloop()

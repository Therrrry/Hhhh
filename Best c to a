import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import io
import os
import tempfile

# Import pycparser modules
from pycparser import parse_file, c_ast, plyparser
import pycparser

class ASTConverterGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("C Code to AST Converter")
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import io
import os
import tempfile
import platform

# Import pycparser modules
from pycparser import parse_file, c_ast, plyparser
import pycparser

# ------------------------------------------------------------------------------
# Set this flag to True to use pcpp (a pure-Python preprocessor).
# This is recommended for Windows users who do not have a system C preprocessor.
# ------------------------------------------------------------------------------
USE_PCPP = True

# If you wish to use a system preprocessor (e.g., on Linux/Mac),
# set USE_PCPP = False and ensure that CPP_PATH points to a valid executable.
CPP_PATH = 'cpp'  # not used when USE_PCPP is True

class ASTConverterGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("C Code to AST Converter")
        self.root.geometry("1200x700")
        self.create_widgets()

    def create_widgets(self):
        # Create a frame for the buttons
        button_frame = tk.Frame(self.root)
        button_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)

        # Button to open a C source file
        open_button = tk.Button(button_frame, text="Open C File", command=self.open_file)
        open_button.pack(side=tk.LEFT, padx=5)

        # Button to clear the input/output text areas
        clear_button = tk.Button(button_frame, text="Clear", command=self.clear_text)
        clear_button.pack(side=tk.LEFT, padx=5)

        # Button to convert C code to AST
        convert_button = tk.Button(button_frame, text="Convert to AST", command=self.convert_to_ast)
        convert_button.pack(side=tk.LEFT, padx=5)

        # Create two side-by-side ScrolledText widgets:
        # One for the C code input and one for the AST output.
        text_frame = tk.Frame(self.root)
        text_frame.pack(fill=tk.BOTH, expand=True)

        # ScrolledText for C code input
        input_label = tk.Label(text_frame, text="C Code Input")
        input_label.pack(anchor=tk.NW, padx=5, pady=(5, 0))
        self.code_text = scrolledtext.ScrolledText(text_frame, wrap=tk.NONE, width=60)
        self.code_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        # ScrolledText for AST output
        output_label = tk.Label(text_frame, text="AST Output")
        output_label.pack(anchor=tk.NE, padx=5, pady=(5, 0))
        self.ast_text = scrolledtext.ScrolledText(text_frame, wrap=tk.NONE, width=60)
        self.ast_text.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)

    def open_file(self):
        """Open a C file and load its content into the input text area."""
        file_path = filedialog.askopenfilename(
            filetypes=[("C Source Files", "*.c"), ("All Files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, "r") as file:
                    code = file.read()
                self.code_text.delete(1.0, tk.END)
                self.code_text.insert(tk.END, code)
            except Exception as e:
                messagebox.showerror("File Error", f"Could not read file:\n{e}")

    def clear_text(self):
        """Clear both the input and output text areas."""
        self.code_text.delete(1.0, tk.END)
        self.ast_text.delete(1.0, tk.END)

    def convert_to_ast(self):
        """
        Convert the C code from the input text area into an AST.
        This version preprocesses the code to handle headers.
        It uses pcpp (a pure-Python C preprocessor) if USE_PCPP is True.
        Otherwise, it uses a system C preprocessor via pycparser.parse_file.
        """
        code = self.code_text.get(1.0, tk.END).strip()
        if not code:
            messagebox.showwarning("No Code", "Please enter or load C code first.")
            return

        # Preprocess and parse the code
        if USE_PCPP:
            try:
                # Import pcpp here so that it's only required when using it.
                from pcpp import Preprocessor
            except ImportError:
                messagebox.showerror("Import Error", "Please install 'pcpp' via pip (pip install pcpp)")
                return

            try:
                # Set up the preprocessor and add the fake libc include directory
                pp = Preprocessor()
                fake_libc_dir = os.path.join(os.path.dirname(pycparser.__file__), 'utils', 'fake_libc_include')
                pp.add_path(fake_libc_dir)

                # pcpp can process code from a file-like object.
                pp.parse(io.StringIO(code))

                # Capture the preprocessed output
                out_buffer = io.StringIO()
                pp.write(out_buffer)
                preprocessed_code = out_buffer.getvalue()
            except Exception as e:
                messagebox.showerror("Preprocessing Error", f"Error during preprocessing with pcpp:\n{e}")
                return

            try:
                # Now parse the preprocessed code using pycparser's CParser.
                from pycparser import c_parser
                parser = c_parser.CParser()
                ast = parser.parse(preprocessed_code)
            except Exception as e:
                messagebox.showerror("Parsing Error", f"Error during parsing preprocessed code:\n{e}")
                return

        else:
            # If not using pcpp, write code to a temporary file and use the system preprocessor.
            try:
                with tempfile.NamedTemporaryFile(mode='w', suffix='.c', delete=False) as tmp_file:
                    tmp_file.write(code)
                    tmp_file_name = tmp_file.name
            except Exception as e:
                messagebox.showerror("Temporary File Error", f"Error creating temporary file:\n{e}")
                return

            try:
                fake_libc_dir = os.path.join(os.path.dirname(pycparser.__file__), 'utils', 'fake_libc_include')
                ast = parse_file(
                    tmp_file_name,
                    use_cpp=True,
                    cpp_path=CPP_PATH,
                    cpp_args=['-E', f'-I{fake_libc_dir}']
                )
            except plyparser.ParseError as parse_err:
                messagebox.showerror("Parse Error", f"Failed to parse C code:\n{parse_err}")
                return
            except FileNotFoundError as fnf_error:
                messagebox.showerror("Preprocessor Error",
                                     f"Unable to invoke the C preprocessor using '{CPP_PATH}'.\n"
                                     "Make sure the preprocessor is installed and CPP_PATH is set correctly.\n"
                                     f"Original error: {fnf_error}")
                return
            except Exception as e:
                messagebox.showerror("Error", f"An unexpected error occurred:\n{e}")
                return
            finally:
                try:
                    os.unlink(tmp_file_name)
                except Exception:
                    pass

        # Capture and display the AST
        try:
            ast_io = io.StringIO()
            ast.show(buf=ast_io)
            ast_str = ast_io.getvalue()
            self.ast_text.delete(1.0, tk.END)
            self.ast_text.insert(tk.END, ast_str)
        except Exception as e:
            messagebox.showerror("AST Error", f"Error generating AST output:\n{e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ASTConverterGUI(root)
    root.mainloop()

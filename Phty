import os
import sys
import clang.cindex
import subprocess
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QFileDialog, QLabel, QLineEdit, QTextEdit

# Automatically detect Clang library path
try:
    clang_lib_path = r"C:\Program Files\LLVM\bin\libclang.dll"  # Adjust as needed
    clang.cindex.Config.set_library_file(clang_lib_path)
except Exception as e:
    print(f"Error loading Clang library: {e}")

class CtoASTConverter(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("C to AST Converter")
        self.setGeometry(100, 100, 600, 400)

        layout = QVBoxLayout()

        # File Selection
        self.file_label = QLabel("Select C File:")
        layout.addWidget(self.file_label)
        self.file_button = QPushButton("Choose File")
        self.file_button.clicked.connect(self.select_file)
        layout.addWidget(self.file_button)

        # Output Directory Selection
        self.output_label = QLabel("Select Output Directory:")
        layout.addWidget(self.output_label)
        self.output_button = QPushButton("Choose Directory")
        self.output_button.clicked.connect(self.select_output_dir)
        layout.addWidget(self.output_button)

        # Output File Name
        self.output_filename_label = QLabel("Enter Output File Name:")
        layout.addWidget(self.output_filename_label)
        self.output_filename_input = QLineEdit()
        layout.addWidget(self.output_filename_input)

        # Convert Button
        self.convert_button = QPushButton("Convert to AST")
        self.convert_button.clicked.connect(self.convert_to_ast)
        layout.addWidget(self.convert_button)

        # Status Label
        self.status_label = QLabel("Select a C file, output directory, and specify a file name.")
        layout.addWidget(self.status_label)

        # AST Output Preview
        self.ast_output_display = QTextEdit()
        self.ast_output_display.setReadOnly(True)
        layout.addWidget(self.ast_output_display)

        self.setLayout(layout)
        self.c_file = ""
        self.output_dir = ""

    def select_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "Select C File", "", "C Files (*.c);;All Files (*)")
        if file_name:
            self.c_file = file_name
            self.file_label.setText(f"Selected File: {self.c_file}")

    def select_output_dir(self):
        dir_name = QFileDialog.getExistingDirectory(self, "Select Output Directory", "")
        if dir_name:
            self.output_dir = dir_name
            self.output_label.setText(f"Selected Directory: {self.output_dir}")

    def preprocess_code(self, filename):
        """Preprocesses the C code to remove unsupported directives."""
        try:
            preprocessed_file = f"{filename}.i"
            subprocess.run(["clang", "-E", filename, "-o", preprocessed_file], check=True)

            with open(preprocessed_file, "r") as f:
                return f.read()
        except Exception as e:
            return f"Error preprocessing file: {str(e)}"

    def parse_ast(self, filename):
        """Parses the C code using Clang and generates an AST."""
        try:
            index = clang.cindex.Index.create()
            translation_unit = index.parse(filename, args=['-std=c99', '-Wall'])

            if not translation_unit:
                return "Error: Unable to parse the file."

            def traverse_ast(node, depth=0):
                try:
                    result = f"{' ' * (depth * 2)}{node.kind.name} - {node.spelling if node.spelling else 'N/A'}\n"
                    for child in node.get_children():
                        result += traverse_ast(child, depth + 1)
                    return result
                except Exception:
                    return ""

            return traverse_ast(translation_unit.cursor)
        except Exception as e:
            return f"Error processing file: {str(e)}"

    def convert_to_ast(self):
        if not self.c_file or not self.output_dir:
            self.status_label.setText("Please select a valid C file and output directory.")
            return

        output_filename = self.output_filename_input.text().strip()
        if not output_filename:
            self.status_label.setText("Please enter a valid output file name.")
            return

        # Preprocess the file
        preprocessed_code = self.preprocess_code(self.c_file)

        if preprocessed_code.startswith("Error"):
            self.status_label.setText(preprocessed_code)
            return

        # Save the preprocessed code
        preprocessed_file = os.path.join(self.output_dir, "temp_preprocessed.c")
        with open(preprocessed_file, "w") as f:
            f.write(preprocessed_code)

        # Parse the AST
        ast_output = self.parse_ast(preprocessed_file)

        if ast_output.startswith("Error"):
            self.status_label.setText(ast_output)
            return

        output_path = os.path.join(self.output_dir, f"{output_filename}.txt")
        with open(output_path, "w") as f:
            f.write(ast_output)

        self.ast_output_display.setPlainText(ast_output)
        self.status_label.setText(f"AST saved at {output_path}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = CtoASTConverter()
    window.show()
    sys.exit(app.exec_())
window.show()
    sys.exit(app.exec_())

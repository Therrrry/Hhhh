import sys
import os
import tempfile
import clang.cindex  # pip install clang
from PyQt5.QtWidgets import (
    QApplication,
    QWidget,
    QVBoxLayout,
    QPushButton,
    QTextEdit,
    QFileDialog,
    QLabel,
    QMessageBox
)

############################################
#  If clang is not auto-detected:
#  uncomment and set your local clang path:
# clang.cindex.Config.set_library_file("/usr/lib/llvm-12/lib/libclang.so")
############################################

class ASTViewer(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Clang-based C AST Generator")
        self.setGeometry(100, 100, 900, 700)

        layout = QVBoxLayout()

        # Intro Label
        instructions_text = """<b>Steps to Use:</b><br>
1) Install Clang + Python bindings (libclang).<br>
2) Paste or load your C code below.<br>
3) Click 'Generate AST' to parse with Clang.<br>
4) The AST appears in the text box at the bottom.<br><br>
<b>If you get errors:</b><br>
- Ensure Clang is installed & \"libclang\" is findable.<br>
- Code must be valid C (or add the right compiler flags).<br>
- Possibly uncomment and set the library file path in the code.
"""
        self.instructions = QLabel(instructions_text)
        layout.addWidget(self.instructions)

        # Buttons
        self.loadBtn = QPushButton("Load C File")
        self.loadBtn.clicked.connect(self.load_c_file)
        layout.addWidget(self.loadBtn)

        self.parseBtn = QPushButton("Generate AST")
        self.parseBtn.clicked.connect(self.parse_code)
        layout.addWidget(self.parseBtn)

        # Code Input Area
        self.codeLabel = QLabel("Paste or Edit C Code Below:")
        layout.addWidget(self.codeLabel)

        self.codeEdit = QTextEdit()
        layout.addWidget(self.codeEdit)

        # AST Output Area
        self.astLabel = QLabel("Clang AST Output:")
        layout.addWidget(self.astLabel)

        self.astOutput = QTextEdit()
        self.astOutput.setReadOnly(True)
        layout.addWidget(self.astOutput)

        self.setLayout(layout)

    def load_c_file(self):
        """Opens a file chooser to load a .c file into the text area."""
        options = QFileDialog.Options()
        filePath, _ = QFileDialog.getOpenFileName(
            self,
            "Open C File",
            "",
            "C Files (*.c);;All Files (*)",
            options=options
        )
        if filePath:
            try:
                with open(filePath, "r", encoding="utf-8", errors="ignore") as f:
                    code = f.read()
                self.codeEdit.setText(code)
                self.astOutput.setText("Loaded file. Click 'Generate AST' to parse.")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to load file:\n{e}")

    def parse_code(self):
        """Parses the C code (pasted or loaded) using libclang and displays its AST."""
        code_str = self.codeEdit.toPlainText()
        if not code_str.strip():
            self.astOutput.setText("No C code provided.")
            return

        # Write to temp file for Clang
        with tempfile.NamedTemporaryFile(delete=False, suffix=".c") as tmp:
            tmp.write(code_str.encode("utf-8", errors="ignore"))
            tmp.flush()
            tmp_path = tmp.name

        try:
            index = clang.cindex.Index.create()

            # Provide standard flags for C parsing. Adjust if needed (C99, C17, etc.).
            # You can also add -I / -D flags to handle includes/macros as needed.
            tu = index.parse(tmp_path, args=["-std=c11", "-I.", "-ferror-limit=0"])

            if not tu or not tu.cursor:
                self.astOutput.setText("Clang failed to parse the code (no translation unit).")
                return

            # If Clang encountered errors, show them:
            diagnostics = tu.diagnostics
            err_msg = []
            for diag in diagnostics:
                if diag.severity >= clang.cindex.Diagnostic.Error:
                    err_msg.append(f"{diag.spelling} (Line {diag.location.line})")
            if err_msg:
                self.astOutput.setText(
                    "Clang reported errors:\n" + "\n".join(err_msg) +
                    "\n\nAttempting to display partial AST below...\n"
                )

            # Recursively build AST output
            ast_str = self.build_ast_text(tu.cursor)
            self.astOutput.append(ast_str)

        except Exception as e:
            self.astOutput.setText(f"Error parsing code with clang:\n{e}")
        finally:
            # Clean up temp file
            try:
                os.remove(tmp_path)
            except OSError:
                pass

    def build_ast_text(self, node, depth=0):
        """Recursively traverse Clang AST and format as a text tree."""
        indent = '  ' * depth
        # Node kind & its name (spelling)
        node_info = f"{indent}- {node.kind} | {node.spelling or ''}"

        # Add file/line info if available
        if node.location.file and node.location.file.name:
            node_info += f"  (File: {node.location.file.name}, Line: {node.location.line})"

        result = node_info + "\n"

        for child in node.get_children():
            result += self.build_ast_text(child, depth + 1)

        return result

if __name__ == "__main__":
    app = QApplication(sys.argv)
    viewer = ASTViewer()
    viewer.show()
    sys.exit(app.exec_())

import os
import sys
from lxml import etree

def parse_arcgis_sequence(xml_path):
    """
    Parse the ArcGIS Workspace XML (exported from EA) for sequence diagram data.
    
    Returns a list of 'interactions'. Each interaction is a dict:
      {
        'name': <string>,
        'lifelines': [ { 'name': <string> }, ... ],
        'messages': [ (send_name, recv_name, message_label), ... ]
      }
      
    In standard UML/XMI, you'd look for:
      - <packagedElement xmi:type="uml:Interaction"> (Interactions)
      - <lifeline> (Lifelines)
      - <message> (Messages)
    But in ArcGIS XML, these tags might differ.
    You must adapt the code below to match the real tags in your ArcGIS export.
    """
    interactions = []
    current_interaction = None
    
    # We'll do a streaming parse with iterparse, so it can handle large files.
    context = etree.iterparse(xml_path, events=("start", "end"), huge_tree=True)

    for event, elem in context:
        # The local name of the tag without namespace
        tag_name = etree.QName(elem).localname
        
        # EXAMPLE of how you might detect an 'Interaction' in some UML-based XMI:
        # In ArcGIS XML, these might be different tagsâ€”adjust as needed:
        if event == "start" and tag_name == "Interaction":
            # You might instead see: <Diagram type="Sequence"> or similar.
            # This is just a placeholder example.
            current_interaction = {
                "name": elem.get("name", "UnnamedInteraction"),
                "lifelines": [],
                "messages": []
            }

        elif event == "end" and tag_name == "Interaction" and current_interaction is not None:
            interactions.append(current_interaction)
            current_interaction = None
            elem.clear()

        # If we are in an interaction, try to detect "lifeline" or "message" elements.
        if current_interaction is not None:
            # EXAMPLE: Suppose ArcGIS has <Lifeline name="SomeObject"/>
            if event == "start" and tag_name == "Lifeline":
                lf_name = elem.get("name", "UnnamedLifeline")
                current_interaction["lifelines"].append({"name": lf_name})
            
            # EXAMPLE: Suppose ArcGIS has <Message source="LifelineA" target="LifelineB" name="callSomething"/>
            elif event == "start" and tag_name == "Message":
                msg_name = elem.get("name", "UnnamedMessage")
                send_ev = elem.get("source", "")  # or "sender"
                recv_ev = elem.get("target", "")  # or "receiver"
                current_interaction["messages"].append((send_ev, recv_ev, msg_name))
        
        # Clear element from memory on "end" to keep usage small
        if event == "end":
            elem.clear()
    
    return interactions


def generate_sequence_diagram_plantuml(interactions):
    """
    Combine all interactions into a single PlantUML sequence diagram.
    If you prefer separate diagrams per interaction, adapt accordingly.
    """
    lines = []
    lines.append("@startuml ArcGISSequenceDiagram")

    for interaction in interactions:
        lines.append(f"title Sequence: {interaction['name']}")

        # Declare participants
        for lf in interaction["lifelines"]:
            lines.append(f"participant {lf['name']}")

        # Add messages
        for (sender, receiver, msg) in interaction["messages"]:
            lines.append(f"{sender} -> {receiver} : {msg}")

        lines.append("")  # blank line after each interaction

    lines.append("@enduml")
    return "\n".join(lines)


def main():
    # Hard-coded paths per your request
    xml_input = r"D:/trap/you.xml"
    uml_output = r"D:/trap/you.uml"

    if not os.path.exists(xml_input):
        print(f"Error: {xml_input} does not exist.")
        sys.exit(1)

    print(f"Reading ArcGIS XML from: {xml_input}")
    interactions = parse_arcgis_sequence(xml_input)
    
    # If no interactions found, you might want to debug or parse differently
    if not interactions:
        print("No sequence interactions found. Check your XML structure.")
    
    print("Generating PlantUML sequence diagram...")
    uml_text = generate_sequence_diagram_plantuml(interactions)

    with open(uml_output, "w", encoding="utf-8") as f:
        f.write(uml_text)

    print(f"Done. Sequence diagram UML written to: {uml_output}")
    print("Use PlantUML to render, e.g.: plantuml D:/trap/you.uml")


if __name__ == "__main__":
    main()

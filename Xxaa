import tkinter as tk
from tkinter import messagebox, filedialog
import pandas as pd
import os

lid_value = "04-apl-00"

# Save to Excel function
def save_to_excel():
    module = module_entry.get().strip()
    interfaces = interface_entry.get().strip()
    sid = sid_entry.get().strip()
    excel_path = file_path.get().strip()

    if not module or not interfaces or not sid or not excel_path:
        messagebox.showerror("Input Error", "Please fill all fields and select file.")
        return

    interface_list = [i.strip() for i in interfaces.split(",") if i.strip()]
    module_col = [module] + [""] * (len(interface_list) - 1)

    data = {
        "Module Name": module_col,
        "Interface Name": interface_list,
        "SID Name": [sid] * len(interface_list),
        "LID": [lid_value] * len(interface_list)
    }

    df_new = pd.DataFrame(data)

    if os.path.exists(excel_path):
        try:
            df_existing = pd.read_excel(excel_path)
            df_combined = pd.concat([df_existing, df_new], ignore_index=True)
            df_combined.to_excel(excel_path, index=False)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to write to Excel:\n{e}")
            return
    else:
        try:
            df_new.to_excel(excel_path, index=False)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to create Excel:\n{e}")
            return

    # Verify write
    try:
        df_check = pd.read_excel(excel_path)
        if df_check.tail(len(df_new)).equals(df_new.reset_index(drop=True)):
            messagebox.showinfo("Success", f"Data saved successfully to:\n{excel_path}")
            module_entry.delete(0, tk.END)
            interface_entry.delete(0, tk.END)
            sid_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Data might not have been saved correctly.")
    except Exception as e:
        messagebox.showerror("Verification Error", f"Could not read back Excel:\n{e}")

# File browser
def browse_file():
    path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel Files", "*.xlsx")])
    if path:
        file_path.set(path)

# GUI window
root = tk.Tk()
root.title("Module Interface Entry with Excel Save")

tk.Label(root, text="Module Name:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
module_entry = tk.Entry(root, width=40)
module_entry.grid(row=0, column=1, pady=5)

tk.Label(root, text="Interfaces (comma-separated):").grid(row=1, column=0, padx=10, pady=5, sticky="e")
interface_entry = tk.Entry(root, width=40)
interface_entry.grid(row=1, column=1, pady=5)

tk.Label(root, text="SID Name:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
sid_entry = tk.Entry(root, width=40)
sid_entry.grid(row=2, column=1, pady=5)

tk.Label(root, text="Excel File Path:").grid(row=3, column=0, padx=10, pady=5, sticky="e")
file_path = tk.StringVar()
file_entry = tk.Entry(root, textvariable=file_path, width=40)
file_entry.grid(row=3, column=1, pady=5)
browse_btn = tk.Button(root, text="Browse", command=browse_file)
browse_btn.grid(row=3, column=2, padx=5)

save_button = tk.Button(root, text="Save to Excel", command=save_to_excel)
save_button.grid(row=4, column=0, columnspan=3, pady=15)

root.mainloop()

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import os

class ExcelComparator:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Excel Row Comparator")
        self.root.geometry("700x500")

        self.file1_path = tk.StringVar()
        self.file2_path = tk.StringVar()
        self.sheet1_name = tk.StringVar()
        self.sheet2_name = tk.StringVar()
        self.column1_name = tk.StringVar()
        self.column2_name = tk.StringVar()

        self.create_widgets()

    def create_widgets(self):
        # Excel 1
        ttk.Label(self.root, text="Select Excel File 1:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        ttk.Entry(self.root, textvariable=self.file1_path, width=50).grid(row=0, column=1, padx=10, pady=5)
        ttk.Button(self.root, text="Browse", command=lambda: self.load_file(1)).grid(row=0, column=2, padx=5, pady=5)

        # Excel 2
        ttk.Label(self.root, text="Select Excel File 2:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        ttk.Entry(self.root, textvariable=self.file2_path, width=50).grid(row=1, column=1, padx=10, pady=5)
        ttk.Button(self.root, text="Browse", command=lambda: self.load_file(2)).grid(row=1, column=2, padx=5, pady=5)

        # Sheet selections
        ttk.Label(self.root, text="Select Sheet from File 1:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.sheet1_menu = ttk.Combobox(self.root, textvariable=self.sheet1_name, state="readonly")
        self.sheet1_menu.grid(row=2, column=1, padx=10, pady=5)

        ttk.Label(self.root, text="Select Sheet from File 2:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
        self.sheet2_menu = ttk.Combobox(self.root, textvariable=self.sheet2_name, state="readonly")
        self.sheet2_menu.grid(row=3, column=1, padx=10, pady=5)

        # Load sheets & columns button
        ttk.Button(self.root, text="Load Sheets & Columns", command=self.load_sheets_and_columns).grid(row=4, column=1, pady=10)

        # Column selections
        ttk.Label(self.root, text="Select Column from File 1:").grid(row=5, column=0, padx=10, pady=5, sticky="w")
        self.column1_menu = ttk.Combobox(self.root, textvariable=self.column1_name, state="readonly")
        self.column1_menu.grid(row=5, column=1, padx=10, pady=5)

        ttk.Label(self.root, text="Select Column from File 2:").grid(row=6, column=0, padx=10, pady=5, sticky="w")
        self.column2_menu = ttk.Combobox(self.root, textvariable=self.column2_name, state="readonly")
        self.column2_menu.grid(row=6, column=1, padx=10, pady=5)

        # Compare button
        ttk.Button(self.root, text="Compare & Generate Output", command=self.compare_files).grid(row=7, column=1, pady=20)

    def load_file(self, file_number):
        file_path = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx;*.xls")])
        if file_path:
            if file_number == 1:
                self.file1_path.set(file_path)
            else:
                self.file2_path.set(file_path)

    def load_sheets_and_columns(self):
        try:
            if not self.file1_path.get() or not self.file2_path.get():
                raise ValueError("Please select both Excel files before loading sheets.")

            sheets1 = pd.ExcelFile(self.file1_path.get()).sheet_names
            sheets2 = pd.ExcelFile(self.file2_path.get()).sheet_names

            self.sheet1_menu["values"] = sheets1
            self.sheet2_menu["values"] = sheets2
            self.sheet1_name.set(sheets1[0])
            self.sheet2_name.set(sheets2[0])

            self.root.after(100, self.load_columns)

        except Exception as e:
            messagebox.showerror("Error", f"Error loading sheets: {e}")

    def load_columns(self):
        try:
            if not self.sheet1_name.get() or not self.sheet2_name.get():
                raise ValueError("Please select sheets before loading columns.")

            df1 = pd.read_excel(self.file1_path.get(), sheet_name=self.sheet1_name.get())
            df2 = pd.read_excel(self.file2_path.get(), sheet_name=self.sheet2_name.get())

            self.column1_menu["values"] = df1.columns.tolist()
            self.column2_menu["values"] = df2.columns.tolist()

            self.column1_name.set(df1.columns[0])
            self.column2_name.set(df2.columns[0])

        except Exception as e:
            messagebox.showerror("Error", f"Error loading columns: {e}")

    def compare_files(self):
        try:
            if not all([
                self.file1_path.get(), self.file2_path.get(),
                self.sheet1_name.get(), self.sheet2_name.get(),
                self.column1_name.get(), self.column2_name.get()
            ]):
                raise ValueError("All selections must be completed before comparing.")

            df1 = pd.read_excel(self.file1_path.get(), sheet_name=self.sheet1_name.get())
            df2 = pd.read_excel(self.file2_path.get(), sheet_name=self.sheet2_name.get())

            min_len = min(len(df1), len(df2))
            df1 = df1.iloc[:min_len].reset_index(drop=True)
            df2 = df2.iloc[:min_len].reset_index(drop=True)

            excel1_col_values = df1[self.column1_name.get()]
            excel2_col_values = df2[self.column2_name.get()]

            # âœ… Final condition logic:
            # - Excel1 column has a non-empty value
            # - Excel2 column is either empty string or NaN
            condition = excel1_col_values.apply(lambda x: str(x).strip() != "") & \
                        excel2_col_values.apply(lambda x: pd.isna(x) or str(x).strip() == "")

            filtered_rows = df1[condition]

            if filtered_rows.empty:
                messagebox.showinfo("Result", "No matching rows found based on the condition.")
                return

            output_file = os.path.join(os.path.dirname(self.file1_path.get()), "comparison_output_final.xlsx")
            filtered_rows.to_excel(output_file, index=False)
            messagebox.showinfo("Success", f"Comparison completed.\nOutput saved at:\n{output_file}")

        except Exception as e:
            messagebox.showerror("Error", f"Comparison failed: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ExcelComparator(root)
    root.mainloop()

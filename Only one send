#!/usr/bin/env python

"""
This script sends a single CAN message with TX ID 0x18DA03FA and waits for the response with RX ID 0x18DAFA03.
"""

import can

def construct_frame(arbitration_id, data, extended_id=True):
    """Constructs a CAN message with the proper frame format."""
    if len(data) > 8:
        raise ValueError("CAN data payload cannot exceed 8 bytes.")

    msg = can.Message(
        arbitration_id=arbitration_id,
        data=data,
        is_extended_id=extended_id
    )
    return msg

def send_and_get_specific_response():
    """Sends a CAN message and waits for a specific response based on RX ID."""

    # Configure the CAN bus interface for Vector CANalyzer
    bus = can.Bus(interface="vector", app_name="CANalyzer", channel=0, bitrate=500000)

    # TX and RX arbitration IDs
    tx_id = 0x18DA03FA  # Transmit ID
    rx_id = 0x18DAFA03  # Expected Receive ID

    # Data to send
    data = [0x02, 0x10, 0x01]

    # Construct the CAN frame
    msg = construct_frame(tx_id, data, extended_id=True)

    try:
        # Send the CAN message
        try:
            bus.send(msg)
            print(f"Message sent: TX ID=0x{tx_id:08X}, Data={msg.data}")
        except can.CanError:
            print("Message NOT sent")
            return

        # Wait for the specific RX ID response
        print(f"Waiting for a response with RX ID=0x{rx_id:08X}...")
        while True:
            response = bus.recv(timeout=5)  # Wait for up to 5 seconds for a response
            if response:
                if response.arbitration_id == rx_id:
                    print(f"Received response: RX ID=0x{response.arbitration_id:08X}, Data={list(response.data)}")
                    break
                else:
                    print(f"Ignored message with ID=0x{response.arbitration_id:08X}")
            else:
                print("No response received within 5 seconds.")
                break

    except KeyboardInterrupt:
        print("Stopped by user")
    finally:
        bus.shutdown()

if __name__ == "__main__":
    send_and_get_specific_response()

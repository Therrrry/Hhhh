import itertools
import can
import time

def prompt_for_range_filter(byte_index, values):
    """
    Ask the user if they want to use all values or a specific range of values for this byte.
    Returns a filtered list of values to use.
    """
    print(f"\nByte {byte_index+1} possible values:")
    print(" ".join([f"0x{v:02X}" for v in values]))

    while True:
        choice = input("Use all values (A) or specify a range (R)? (A/R): ").strip().upper()
        if choice == 'A':
            return values[:]  # Use all values as is
        elif choice == 'R':
            start_str = input("Enter start hex value (e.g. 0x20): ").strip()
            end_str = input("Enter end hex value (e.g. 0x25): ").strip()
            try:
                start_val = int(start_str, 16)
                end_val = int(end_str, 16)
                filtered = [v for v in values if start_val <= v <= end_val]
                if len(filtered) == 0:
                    print("No values found in the specified range. Try again.")
                else:
                    return filtered
            except ValueError:
                print("Invalid hex inputs. Try again.")
        else:
            print("Invalid choice. Enter 'A' or 'R'.")

def parse_hex_values(input_str):
    """
    Parse a string of hex values (e.g. '0x10 0x11 0xA0') into a tuple of integers.
    Returns a tuple of integers if successful, or None if parsing fails.
    """
    parts = input_str.strip().split()
    result = []
    for p in parts:
        try:
            val = int(p, 16)
            if 0 <= val <= 0xFF:
                result.append(val)
            else:
                print(f"Value {p} out of 0x00-0xFF range.")
                return None
        except ValueError:
            print(f"Invalid hex value: {p}")
            return None
    return tuple(result) if result else None

def main():
    # ------------------------------------------------------------
    # Configuration Section
    # ------------------------------------------------------------
    channel = 'can0'            # Adjust as needed
    interface = 'socketcan'     # Adjust as needed
    bitrate = 500000            # Adjust as needed

    request_id = 0x18FFFFF0     # Extended CAN ID for request
    expected_response_id = 0x18FFFFF1  # The corresponding expected response CAN ID
    is_extended_id = True

    asc_filename = "can_log.asc"  # Log file name

    send_timeout = 1.0
    recv_timeout = 0.5
    recv_poll_interval = 0.1

    # ------------------------------------------------------------
    # Predefined values for each of the 8 Bytes
    byte1_values = [0x01]
    byte2_values = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
    ]
    byte3_values = [0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]
    byte4_values = [0xA0, 0xA1, 0xA2]
    byte5_values = [0x00]
    byte6_values = [0x00]
    byte7_values = [0x00]
    byte8_values = [0x00]

    all_bytes_values = [
        byte1_values,
        byte2_values,
        byte3_values,
        byte4_values,
        byte5_values,
        byte6_values,
        byte7_values,
        byte8_values
    ]
    # ------------------------------------------------------------

    # Set up the CAN bus
    bus = can.ThreadSafeBus(channel=channel, interface=interface, bitrate=bitrate)
    writer = can.ASCWriter(asc_filename)

    # For each byte except the first, ask user choice
    filtered_values = [all_bytes_values[0]]  # Byte 1 unchanged
    for i in range(1, 8):
        filtered = prompt_for_range_filter(i, all_bytes_values[i])
        filtered_values.append(filtered)

    # Generate all combinations
    all_combinations = itertools.product(*filtered_values)

    # response_map: {response_data_tuple: [(tx_id, tx_data_tuple, rx_id, rx_data_tuple), ...]}
    response_map = {}

    try:
        for combo in all_combinations:
            msg_data = list(combo)
            tx_msg = can.Message(
                arbitration_id=request_id,
                data=msg_data,
                is_extended_id=is_extended_id
            )

            # Send the message
            try:
                bus.send(tx_msg, timeout=send_timeout)
                writer.on_message_received(tx_msg)
                print(f"Sent: TX_ID={hex(request_id)} TX_Data={[hex(d) for d in msg_data]}")
            except can.CanError as e:
                print(f"Error sending message: {e}")
                continue

            # Attempt to receive a corresponding response
            # We only consider responses that match the expected_response_id
            start_time = time.time()
            while time.time() - start_time < recv_timeout:
                response = bus.recv(timeout=recv_poll_interval)
                if response is not None and response.arbitration_id == expected_response_id:
                    writer.on_message_received(response)
                    r_data = tuple(response.data)
                    print(f"Received: RX_ID={hex(response.arbitration_id)} RX_Data={[hex(d) for d in response.data]}")

                    if r_data not in response_map:
                        response_map[r_data] = []
                    response_map[r_data].append((request_id, tuple(msg_data), response.arbitration_id, r_data))
                    break
                # If response is from some other ID, ignore it and keep waiting.
            # If no matching response comes in before timeout, no entry is made.

    finally:
        bus.shutdown()
        print(f"Logging complete. Output saved to {asc_filename}")

    # After completing all combinations, allow user to search for a response
    while True:
        query = input("\nEnter a response data to search (hex values separated by space) or 'exit' to quit: ").strip()
        if query.lower() == 'exit':
            break
        query_values = parse_hex_values(query)
        if query_values is None:
            print("Invalid input. Try again.")
            continue

        if query_values in response_map:
            print(f"\nResponse {query} was found. The following TX/RX pairs generated it:")
            for (tx_id, tx_data_tuple, rx_id, rx_data_tuple) in response_map[query_values]:
                tx_data_str = " ".join([f"0x{b:02X}" for b in tx_data_tuple])
                rx_data_str = " ".join([f"0x{b:02X}" for b in rx_data_tuple])
                print(f"TX_ID={hex(tx_id)} TX_Data=[{tx_data_str}] | RX_ID={hex(rx_id)} RX_Data=[{rx_data_str}]")
        else:
            print("No matching response found.")

    print("Search completed. Exiting.")

if __name__ == "__main__":
    main()

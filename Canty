import itertools
import can
import time

def main():
    # ------------------------------------------------------------
    # Configuration Section
    # ------------------------------------------------------------
    channel = 'can0'            # Adjust as needed
    interface = 'socketcan'     # Adjust as needed
    bitrate = 500000            # Adjust as needed

    request_id = 0x18FFFFF0     # Extended CAN ID
    is_extended_id = True

    asc_filename = "can_log.asc"

    send_timeout = 1.0
    recv_timeout = 0.5
    recv_poll_interval = 0.1

    # Predefined values for each of the 8 bytes
    byte_values_options = [
        [0x01],                             # Byte 1
        list(range(0x00, 0x40)),            # Byte 2
        [0x10, 0x11, 0x12, 0x13, 0x14, 
         0x15, 0x16, 0x17],                 # Byte 3
        [0xA0, 0xA1, 0xA2],                 # Byte 4
        [0x00],                             # Byte 5
        [0x00],                             # Byte 6
        [0x00],                             # Byte 7
        [0x00]                              # Byte 8
    ]
    # ------------------------------------------------------------

    # Set up the CAN bus
    bus = can.ThreadSafeBus(channel=channel, interface=interface, bitrate=bitrate)
    writer = can.ASCWriter(asc_filename)

    # Generate all combinations
    all_combinations = itertools.product(*byte_values_options)

    try:
        for combo in all_combinations:
            msg_data = list(combo)
            msg = can.Message(
                arbitration_id=request_id,
                data=msg_data,
                is_extended_id=is_extended_id
            )

            try:
                bus.send(msg, timeout=send_timeout)
                # Log sent message
                writer.on_message_received(msg)
                print(f"Sent: ID={hex(request_id)} Data={[hex(d) for d in msg_data]}")
            except can.CanError as e:
                print(f"Error sending message: {e}")
                continue

            # Attempt to read a response
            start_time = time.time()
            while time.time() - start_time < recv_timeout:
                response = bus.recv(timeout=recv_poll_interval)
                if response is not None:
                    # Log received message
                    writer.on_message_received(response)
                    print(f"Received: ID={hex(response.arbitration_id)} Data={[hex(d) for d in response.data]}")
                    break

    finally:
        bus.shutdown()
        print(f"Logging complete. Output saved to {asc_filename}")

if __name__ == "__main__":
    main()
